#!/bin/bash
set -e
echo ""

### DO NOT run this script in the server repo.
### It will overwrite files that you previously had configured.

# Get port flag
while getopts p: flag
do
  case "${flag}" in
    p) port=${OPTARG};;
  esac
done

# Sets DIRECTORY variable to current directory of this file
DIRECTORY=$(dirname "${BASH_SOURCE[0]}")


# Testing for Ruby
echo "This program requires either Ruby to run"
which ruby
echo "Test for Ruby succeeded"

# Testing for port number
if [ "$port" = "" ]; then
  echo "Port number was empty. Try including a -p flag with a number after it, like this:"
  echo "bin/dockerize -p 3000"
  echo "exiting..."
  exit 1
fi

# Get user response on overwriting a file
accept=false
while :
do
  echo ""
  echo "Are you sure you would like to overwrite this database config file: 'ror/config/database.yml'? (save a copy if you are unsure)"
  echo $looping
  read -n 1 -p " (Y/n): " input
  if [ "$input" = "y" ] || [ "$input" = "Y" ] || [ "$input" = "" ]; then
    accept=true
    break
  elif [ "$input" = "n" ] || [ "$input" = "N" ]; then
    break
  else
    echo ""
    echo ""
    echo "That was not a valid response"
  fi
done
echo ""
# Handle action based on user response
if [ "$accept" = "true" ]; then
  ruby $DIRECTORY/.set-db-config.rb || status=error
  if [ "$status" = "error" ]; then
    tput setaf 1;
    echo "---------------------------------------------------------------"
    echo "WARNING: OVERWRITE FAILED"
    echo "Please modify ror/config/database.yml manually using this example:"
    echo ".docker/example.database.yml"
    echo "---------------------------------------------------------------"
    tput sgr0;
  else
    echo "---------------------------------------------------------------"
    echo "Overwrote ror/config/database.yml"
    echo "---------------------------------------------------------------"
  fi
else
  tput setaf 3;
  echo "---------------------------------------------------------------"
  echo "Overwrite of ror/config/database.yml denied."
  echo "Please handle this config file manually using this file as an example:"
  echo ".docker/example.database.yml"
  echo "---------------------------------------------------------------"
  tput sgr0;
  status=warning
fi

# Create .env file from example.env
cp $DIRECTORY/../.docker/example.env $DIRECTORY/../.docker/.env
echo "---------------------------------------------------------------"
echo "Created .docker/.env file"
echo "---------------------------------------------------------------"

# Find port in YAML file and change it
ruby $DIRECTORY/change-port.rb "$port"
echo "---------------------------------------------------------------"
echo "Wrote port number '$port' to docker-compose.yml."
echo "---------------------------------------------------------------"


$DIRECTORY/build-frontend

echo "Your app has been Dockerized!!"
echo "When you update your app, be sure to run the 'build-frontend' script in the bin folder before pushing to GitHub. For now, that script has automatically been run for you, so you are safe to push."

if [ "${status}" = "error" ]; then
  tput setaf 1;
  echo "Please address overwrite error above in red before continuing."
  tput sgr0;
elif [ "${status}" = "warning" ]; then
  tput setaf 3;
  echo "Please address overwrite warning above in yellow before continuing."
  tput sgr0;
fi